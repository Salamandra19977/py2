import os
from datetime import date
from PyQt5.QtWidgets import QWidget, QPushButton, QLabel, QVBoxLayout, QMessageBox
from PyQt5.QtCore import Qt, QTimer, QPropertyAnimation, QRect, QEasingCurve
from database import *
import random

with open("style.css", "r") as stylesheet:
    APP_STYLE = stylesheet.read()

class GameWindow(QWidget):
    def __init__(self, user_id: int) -> None:
        super().__init__()
        self.setWindowTitle("–ì—Ä–∞ –ö–ª—ñ–∫–µ—Ä")
        self.setStyleSheet(APP_STYLE)
        self.setFixedSize(400, 500)

        self.user_id = user_id
        self.coins = 0
        self.passive_income = 0
        self.upgrade_cost = 100
        self.click_value = 1
        self.auto_clicker = 0
        self.bonus = 0
        self.double_click = 1
        self.upgrade_discount = 0
        self.bonus_multiplier = 1

        layout = QVBoxLayout()

        self.leaderboard_button = QPushButton("–ü–æ–∫–∞–∑–∞—Ç–∏ —Ä–µ–π—Ç–∏–Ω–≥")
        self.leaderboard_button.clicked.connect(self.show_leaderboard)
        layout.addWidget(self.leaderboard_button)

        layout.addWidget(QLabel(f"–í—ñ—Ç–∞—î–º–æ –≤ –≥—Ä—ñ! –í–∞—à ID: {user_id}", alignment=Qt.AlignCenter))
        self.coins_label = QLabel(f"–ú–æ–Ω–µ—Ç–∏: {self.coins}")
        self.coins_label.setAlignment(Qt.AlignCenter)
        self.coins_label.setStyleSheet("font-size: 18px;")

        self.click_button = QPushButton("üöÄ –ö–ª—ñ–∫–Ω–∏!")
        self.click_button.setObjectName("clickButton")
        self.click_button.clicked.connect(self.handle_click)

        self.upgrade_button = QPushButton(f"–ü–æ–∫—Ä–∞—â–µ–Ω–Ω—è (–¶—ñ–Ω–∞: {self.upgrade_cost} –º–æ–Ω–µ—Ç)")
        self.upgrade_button.setStyleSheet("font-size: 14px;")
        self.upgrade_button.clicked.connect(self.handle_upgrade)

        self.passive_income_label = QLabel(f"–ü–∞—Å–∏–≤–Ω–∏–π –¥–æ—Ö—ñ–¥: {self.passive_income}/—Å")
        self.passive_income_label.setAlignment(Qt.AlignCenter)

        self.auto_clicker_button = QPushButton("–ê–≤—Ç–æ–∫–ª—ñ–∫–µ—Ä (–¶—ñ–Ω–∞: 500 –º–æ–Ω–µ—Ç)")
        self.auto_clicker_button.clicked.connect(self.handle_auto_clicker)

        self.double_click_button = QPushButton("–ü–æ–¥–≤–æ—ó—Ç–∏ –º–æ–Ω–µ—Ç–∏ –∑–∞ –∫–ª—ñ–∫ (–¶—ñ–Ω–∞: 1000 –º–æ–Ω–µ—Ç)")
        self.double_click_button.clicked.connect(self.handle_double_click)

        self.upgrade_discount_button = QPushButton("–ó–Ω–∏–∂–∫–∞ –Ω–∞ –ø–æ–∫—Ä–∞—â–µ–Ω–Ω—è (–¶—ñ–Ω–∞: 1500 –º–æ–Ω–µ—Ç)")
        self.upgrade_discount_button.clicked.connect(self.handle_upgrade_discount)

        self.bonus_button = QPushButton("–û—Ç—Ä–∏–º–∞—Ç–∏ –±–æ–Ω—É—Å")
        self.bonus_button.clicked.connect(self.handle_bonus)
        self.daily_bonus_button = QPushButton("–û—Ç—Ä–∏–º–∞—Ç–∏ —â–æ–¥–µ–Ω–Ω–∏–π –±–æ–Ω—É—Å")
        self.daily_bonus_button.clicked.connect(self.claim_daily_bonus)

        if not self.check_daily_bonus_available():
            self.daily_bonus_button.setEnabled(False)
            self.daily_bonus_button.setText("–©–æ–¥–µ–Ω–Ω–∏–π –±–æ–Ω—É—Å –≤–∂–µ –æ—Ç—Ä–∏–º–∞–Ω–æ")

        self.save_button = QPushButton("üòÄ –ó–∞—Ñ—ñ–∫—Å—É–≤–∞—Ç–∏ —Ä–µ–∑—É–ª—å—Ç–∞—Ç")
        self.save_button.clicked.connect(self.save_progress)

        layout.addWidget(self.daily_bonus_button)
        layout.addWidget(self.coins_label)
        layout.addWidget(self.click_button)
        layout.addWidget(self.upgrade_button)
        layout.addWidget(self.auto_clicker_button)
        layout.addWidget(self.double_click_button)
        layout.addWidget(self.upgrade_discount_button)
        layout.addWidget(self.bonus_button)
        layout.addWidget(self.passive_income_label)
        layout.addWidget(self.save_button)

        self.setLayout(layout)

        self.game_timer = QTimer(self)
        self.game_timer.timeout.connect(self.game_loop)
        self.game_timer.start(1000)

    def show_leaderboard(self) -> None:
        try:
            leaderboard = get_leaderboard()
            if not leaderboard:
                QMessageBox.information(self, "–†–µ–π—Ç–∏–Ω–≥", "–ù–µ–º–∞—î –¥–∞–Ω–∏—Ö –¥–ª—è —Ä–µ–π—Ç–∏–Ω–≥—É.")
                return

            message = "–¢–æ–ø –≥—Ä–∞–≤—Ü—ñ–≤:\n"
            for i, (uid, score) in enumerate(leaderboard, 1):
                message += f"{i}. ID {uid} ‚Äî {score} –º–æ–Ω–µ—Ç\n"

            QMessageBox.information(self, "–†–µ–π—Ç–∏–Ω–≥", message)
        except Exception as e:
            QMessageBox.warning(self, "–ü–æ–º–∏–ª–∫–∞", f"–ù–µ –≤–¥–∞–ª–æ—Å—è –∑–∞–≤–∞–Ω—Ç–∞–∂–∏—Ç–∏ —Ä–µ–π—Ç–∏–Ω–≥.\n{str(e)}")

    def check_daily_bonus_available(self) -> bool:
        today = str(date.today())
        if os.path.exists("last_bonus.txt"):
            with open("last_bonus.txt", "r") as file:
                last_date = file.read().strip()
                return last_date != today
        return True

    def claim_daily_bonus(self) -> None:
        if self.check_daily_bonus_available():
            bonus = random.randint(100, 300)
            self.coins += bonus
            self.coins_label.setText(f"–ú–æ–Ω–µ—Ç–∏: {self.coins}")
            with open("last_bonus.txt", "w") as file:
                file.write(str(date.today()))
            self.daily_bonus_button.setText(f"–ë–æ–Ω—É—Å –æ—Ç—Ä–∏–º–∞–Ω–æ: {bonus} –º–æ–Ω–µ—Ç")
            self.daily_bonus_button.setEnabled(False)
        else:
            QMessageBox.information(self, "–Ü–Ω—Ñ–æ—Ä–º–∞—Ü—ñ—è", "–í–∏ –≤–∂–µ –æ—Ç—Ä–∏–º–∞–ª–∏ —â–æ–¥–µ–Ω–Ω–∏–π –±–æ–Ω—É—Å —Å—å–æ–≥–æ–¥–Ω—ñ.")

    def handle_click(self) -> None:
        self.coins += self.click_value * self.double_click
        self.coins_label.setText(f"–ú–æ–Ω–µ—Ç–∏: {self.coins}")

    def handle_upgrade(self) -> None:
        if self.coins >= self.upgrade_cost:
            self.coins -= self.upgrade_cost
            self.passive_income += 1
            self.coins_label.setText(f"–ú–æ–Ω–µ—Ç–∏: {self.coins}")
            self.passive_income_label.setText(f"–ü–∞—Å–∏–≤–Ω–∏–π –¥–æ—Ö—ñ–¥: {self.passive_income}/—Å")
            self.upgrade_cost = int(self.upgrade_cost * 1.5) * (1 - self.upgrade_discount)
            self.upgrade_button.setText(f"–ü–æ–∫—Ä–∞—â–µ–Ω–Ω—è (–¶—ñ–Ω–∞: {self.upgrade_cost} –º–æ–Ω–µ—Ç)")
        else:
            QMessageBox.warning(self, "–ü–æ–º–∏–ª–∫–∞", "–ù–µ –≤–∏—Å—Ç–∞—á–∞—î –º–æ–Ω–µ—Ç –¥–ª—è –ø–æ–∫—Ä–∞—â–µ–Ω–Ω—è!")

    def handle_auto_clicker(self) -> None:
        if self.coins >= 500:
            self.coins -= 500
            self.auto_clicker += 1
            self.coins_label.setText(f"–ú–æ–Ω–µ—Ç–∏: {self.coins}")
            self.auto_clicker_button.setText(f"–ê–≤—Ç–æ–∫–ª—ñ–∫–µ—Ä (–ö—ñ–ª—å–∫—ñ—Å—Ç—å: {self.auto_clicker})")
        else:
            QMessageBox.warning(self, "–ü–æ–º–∏–ª–∫–∞", "–ù–µ –≤–∏—Å—Ç–∞—á–∞—î –º–æ–Ω–µ—Ç –¥–ª—è –∞–≤—Ç–æ–∫–ª—ñ–∫–µ—Ä–∞!")

    def handle_double_click(self) -> None:
        if self.coins >= 1000:
            self.coins -= 1000
            self.double_click = 2
            self.coins_label.setText(f"–ú–æ–Ω–µ—Ç–∏: {self.coins}")
            self.double_click_button.setText("–ü–æ–¥–≤–æ—ó—Ç–∏ –º–æ–Ω–µ—Ç–∏ –∑–∞ –∫–ª—ñ–∫ (–í–∏–∫–æ–Ω–∞–Ω–æ)")

    def handle_upgrade_discount(self) -> None:
        if self.coins >= 1500:
            self.coins -= 1500
            self.upgrade_discount = 0.5
            self.coins_label.setText(f"–ú–æ–Ω–µ—Ç–∏: {self.coins}")
            self.upgrade_discount_button.setText("–ó–Ω–∏–∂–∫–∞ –Ω–∞ –ø–æ–∫—Ä–∞—â–µ–Ω–Ω—è (–í–∏–∫–æ–Ω–∞–Ω–æ)")

    def handle_bonus(self) -> None:
        bonus = random.randint(10, 100) * self.bonus_multiplier
        self.coins += bonus
        self.coins_label.setText(f"–ú–æ–Ω–µ—Ç–∏: {self.coins}")
        self.bonus_button.setText(f"–û—Ç—Ä–∏–º–∞–Ω–æ –±–æ–Ω—É—Å: {bonus} –º–æ–Ω–µ—Ç")

    def save_progress(self) -> None:
        try:
            update_score(self.user_id, self.coins)
            QMessageBox.information(self, "–ó–±–µ—Ä–µ–∂–µ–Ω–Ω—è", "–ü—Ä–æ–≥—Ä–µ—Å —É—Å–ø—ñ—à–Ω–æ –∑–±–µ—Ä–µ–∂–µ–Ω–æ!")
        except Exception as e:
            QMessageBox.warning(self, "–ü–æ–º–∏–ª–∫–∞", f"–ù–µ –≤–¥–∞–ª–æ—Å—è –∑–±–µ—Ä–µ–≥—Ç–∏ –ø—Ä–æ–≥—Ä–µ—Å.\n{str(e)}")

    def game_loop(self) -> None:
        self.coins += self.passive_income + (self.auto_clicker * 1)
        self.coins_label.setText(f"–ú–æ–Ω–µ—Ç–∏: {self.coins}")
